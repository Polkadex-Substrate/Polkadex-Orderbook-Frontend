import { FC, PropsWithChildren } from "react";
import { ApiPromise } from "@polkadot/api";
import { LmpApi } from "@polkadex/polkadex-api";
import { DefinitionsCall } from "@polkadot/types/types";

export const orderbookTypes = {
  Address: "MultiAddress",
  LookupSource: "MultiAddress",
  AssetId: {
    _enum: {
      Asset: "u128",
      POLKADEX: null,
    },
  },
  CurrencyId: "AssetId",
  ShardIdentifier: "H256",
  Balance: "u128",
  BalanceOf: "Balance",
  OrderPayload: {
    client_order_id: "H256",
    user: "AccountId",
    main_account: "AccountId",
    pair: "String",
    side: "OrderSide",
    order_type: "OrderType",
    quote_order_quantity: "String", // Quantity is defined in base asset
    qty: "String",
    price: "String", // Price is defined in quote asset per unit base asset
    timestamp: "i64",
  },
  order_id: "H256",
  TradingPair: {
    base_asset: "AssetId",
    quote_asset: "AssetId",
  },
  OrderSide: {
    _enum: {
      Ask: null,
      Bid: null,
    },
  },
  OrderType: {
    _enum: {
      LIMIT: null,
      MARKET: null,
    },
  },
  WithdrawPayload: {
    asset_id: "AssetId",
    amount: "String",
    timestamp: "i64",
  },
};

export const runtimeTypes = {
  AssetId: {
    _enum: {
      Asset: "u128",
      Polkadex: null,
    },
  },
  TradingPair: {
    base: "AssetId",
    quote: "AssetId",
  },
};

export const types = {
  ...runtimeTypes,
  ...orderbookTypes,
};

export const runtime: DefinitionsCall = {
  AssetConversionApi: [
    {
      methods: {
        get_reserves: {
          description: "Get pool reserves",
          params: [
            {
              name: "asset1",
              type: "AssetId",
            },
            {
              name: "asset2",
              type: "AssetId",
            },
          ],
          type: "Option<(Balance,Balance)>",
        },
      },
      version: 1,
    },
  ],
};

export const rpc = {
  tx: {
    quotePriceExactTokensForTokens: {
      description: "quote price given swapping exact tokens for tokens",
      params: [
        {
          name: "asset_id1",
          type: "String",
        },
        {
          name: "asset_id2",
          type: "String",
        },
        {
          name: "amount",
          type: "u128",
        },
        {
          name: "include_fee",
          type: "bool",
        },
      ],
      type: "Option<u128>",
    },
    quotePriceTokensForExactTokens: {
      description: "quote price given swapping tokens for exact tokens",
      params: [
        {
          name: "asset_id1",
          type: "String",
        },
        {
          name: "asset_id2",
          type: "String",
        },
        {
          name: "amount",
          type: "u128",
        },
        {
          name: "include_fee",
          type: "bool",
        },
      ],
      type: "Option<u128>",
    },
  },

  lmp: {
    accountsSorted: {
      description: "eligible rewards for an account given market and epoch",
      params: [
        {
          name: "epoch",
          type: "u16",
        },
        {
          name: "market",
          type: "String",
        },
        {
          name: "sorted_by_mm_score",
          type: "bool",
        },
        {
          name: "limit",
          type: "u16",
        },
      ],
      type: "Vec<AccountId>>",
    },
    eligibleRewards: {
      description: "eligible rewards for an account given market and epoch",
      params: [
        {
          name: "epoch",
          type: "u16",
        },
        {
          name: "market",
          type: "String",
        },
        {
          name: "main",
          type: "AccountId",
        },
      ],
      type: "(String, String, String)",
    },
    feesPaidByUserPerEpoch: {
      description: "fee paid by an account given market and epoch",
      params: [
        {
          name: "epoch",
          type: "u16",
        },
        {
          name: "market",
          type: "String",
        },
        {
          name: "main",
          type: "AccountId",
        },
      ],
      type: "String",
    },
    volumeGeneratedByUserPerEpoch: {
      description: "volume generated by an account given market and epoch",
      params: [
        {
          name: "epoch",
          type: "u16",
        },
        {
          name: "market",
          type: "String",
        },
        {
          name: "main",
          type: "AccountId",
        },
      ],
      type: "String",
    },
    listClaimableEpochs: {
      description: "claimable rewards epochs for an account",
      params: [
        {
          name: "market",
          type: "String",
        },
        {
          name: "main",
          type: "AccountId",
        },
        {
          name: "until_epoch",
          type: "u16",
        },
      ],
      type: "Vec<u16>",
    },
  },
};

export const apiTypes = { types, rpc, runtime };

export interface NativeApiState {
  connected: boolean;
  connecting: boolean;
  timestamp?: number;
  hasExtension?: boolean;
  api?: ApiPromise;
  lmp?: LmpApi;
}

export type NativeApiProps = {
  onError?: (value: string) => void;
  onNotification?: (value: string) => void;
};

export type NativeApiProviderProps = PropsWithChildren<{
  value: NativeApiContextProps;
}>;

export type NativeApiContextProps = NativeApiState;

export type NativeApiComponent = FC<PropsWithChildren<NativeApiProps>>;
